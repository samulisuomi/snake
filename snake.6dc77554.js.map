{"version":3,"sources":["index.js"],"names":["window","SnakeGame","initialize","height","width","field","Array","fill","forEach","_cell","index","headY","headX","Math","floor","tailY","tailX","i","inputBuffer","direction","gameOver","onMouseDown","event","target","textContent","addInputToBuffer","onKeyDown","code","inputDirection","previousInput","length","nextHeadY","nextHeadX","getInvertedDirection","moveSnake","endGame","oldHeadX","oldHeadY","sort","join","onTick","firstInput","otherInputs","draw","console","log","getTileName","directions","containerElement","document","querySelector","topBorderRowElement","createElement","className","topLeftBorderCellElement","appendChild","borderCellElement","topRightBorderCellElement","row","rowElement","leftBorderCellElement","cell","cellElement","rightBorderCellElement","bottomBorderRowElement","bottomLeftBorderCellElement","bottomRightBorderCellElement","addEventListener","_event","setInterval"],"mappings":"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","file":"snake.6dc77554.js","sourceRoot":"..","sourcesContent":["window.SnakeGame = this\r\n\r\nthis.initialize = () => {\r\n  this.height = 11\r\n  this.width = 20\r\n\r\n  this.field = new Array(this.height).fill([])\r\n  this.field.forEach((_cell, index) => {\r\n    this.field[index] = new Array(this.width).fill(0)\r\n  })\r\n  this.headY = this.height - 1\r\n  this.headX = Math.floor((this.width - 1) / 2)\r\n  this.tailY = this.headY\r\n  this.tailX = 0\r\n  for (let i = this.tailX; i <= this.headX; i++) {\r\n    this.field[this.tailY][i] = i === this.headX ? 'l' : 'lr'\r\n  }\r\n\r\n  this.inputBuffer = []\r\n  this.direction = 'r'\r\n  this.gameOver = false\r\n}\r\n\r\nthis.onMouseDown = event => {\r\n  switch (event.target.textContent) {\r\n    case '2':\r\n      return this.addInputToBuffer('u')\r\n    case '6':\r\n      return this.addInputToBuffer('r')\r\n    case '8':\r\n      return this.addInputToBuffer('d')\r\n    case '4':\r\n      return this.addInputToBuffer('l')\r\n    default:\r\n      if (this.gameOver) {\r\n        this.initialize()\r\n      }\r\n  }\r\n}\r\n\r\nthis.onKeyDown = event => {\r\n  switch (event.code) {\r\n    case 'ArrowUp':\r\n    case 'KeyW':\r\n      return this.addInputToBuffer('u')\r\n    case 'ArrowRight':\r\n    case 'KeyD':\r\n      return this.addInputToBuffer('r')\r\n    case 'ArrowDown':\r\n    case 'KeyS':\r\n      return this.addInputToBuffer('d')\r\n    case 'ArrowLeft':\r\n    case 'KeyA':\r\n      return this.addInputToBuffer('l')\r\n    default:\r\n      if (this.gameOver) {\r\n        this.initialize()\r\n      }\r\n  }\r\n}\r\n\r\nthis.addInputToBuffer = inputDirection => {\r\n  const previousInput = this.inputBuffer[this.inputBuffer.length - 1] || this.direction\r\n\r\n  switch (inputDirection) {\r\n    case 'u':\r\n    case 'd':\r\n      if (previousInput !== 'u' && previousInput !== 'd') {\r\n        this.inputBuffer = [...this.inputBuffer, inputDirection]\r\n      }\r\n      break\r\n    case 'l':\r\n    case 'r':\r\n      if (previousInput !== 'r' && previousInput !== 'l') {\r\n        this.inputBuffer = [...this.inputBuffer, inputDirection]\r\n      }\r\n      break\r\n  }\r\n}\r\n\r\nthis.nextHeadY = () => {\r\n  switch(this.direction) {\r\n    case 'u':\r\n      return this.headY - 1\r\n    case 'd':\r\n      return this.headY + 1\r\n    default:\r\n      return this.headY\r\n  }\r\n}\r\n\r\nthis.nextHeadX = () => {\r\n  switch(this.direction) {\r\n    case 'l':\r\n      return this.headX - 1\r\n    case 'r':\r\n      return this.headX + 1\r\n    default:\r\n      return this.headX\r\n  }\r\n}\r\n\r\n\r\n\r\nthis.getInvertedDirection = direction => {\r\n  switch(direction) {\r\n    case 'u':\r\n      return 'd'\r\n    case 'r':\r\n      return 'l'\r\n    case 'd':\r\n      return 'u'\r\n    case 'l':\r\n      return 'r'\r\n  }\r\n}\r\n\r\nthis.moveSnake = () => {\r\n  const nextHeadX = this.nextHeadX()\r\n  const nextHeadY = this.nextHeadY()\r\n\r\n  if (nextHeadX < 0 || nextHeadX >= this.width || nextHeadY < 0 || nextHeadY >= this.height) {\r\n    return this.endGame()\r\n  }\r\n\r\n  // TODO: Check if the snake would collide\r\n\r\n  const oldHeadX = this.headX\r\n  const oldHeadY = this.headY\r\n  this.headX = nextHeadX\r\n  this.headY = nextHeadY\r\n\r\n  this.field[oldHeadY][oldHeadX] = [this.field[oldHeadY][oldHeadX], this.direction].sort().join('')\r\n  this.field[this.headY][this.headX] = this.getInvertedDirection(this.direction)\r\n\r\n\r\n}\r\n\r\nthis.onTick = () => {\r\n  if (this.inputBuffer.length) {\r\n    const [firstInput, ...otherInputs] = this.inputBuffer\r\n\r\n    this.direction = firstInput\r\n    this.inputBuffer = otherInputs\r\n  }\r\n  if (!this.gameOver) {\r\n    this.moveSnake()\r\n    this.draw()\r\n  }\r\n}\r\n\r\nthis.endGame = () => {\r\n  this.gameOver = true\r\n  console.log('Game over')\r\n}\r\n\r\nthis.getTileName = directions => {\r\n  switch(directions) {\r\n    case 'lr':\r\n    case 'r':\r\n    case 'ru':\r\n      return 'lr-r-ru'\r\n    case 'd':\r\n    case 'dl':\r\n    case 'du':\r\n      return 'd-dl-du'\r\n    case 'l':\r\n    case 'lu':\r\n    case 'u':\r\n      return 'l-lu-u'\r\n    case 'dr':\r\n      return 'dr'\r\n  }\r\n}\r\n\r\nthis.draw = () => {\r\n  const containerElement = document.querySelector('.snake')\r\n  containerElement.textContent = ''\r\n\r\n  // Top border:\r\n\r\n  const topBorderRowElement = document.createElement('div')\r\n  topBorderRowElement.className = 'row'\r\n\r\n  const topLeftBorderCellElement = document.createElement('div')\r\n  topLeftBorderCellElement.className = 'border-cell top-left'\r\n  topBorderRowElement.appendChild(topLeftBorderCellElement)\r\n\r\n  for (let i = 0; i < this.width; i++) {\r\n    const borderCellElement = document.createElement('div')\r\n    borderCellElement.className = 'border-cell top'\r\n    topBorderRowElement.appendChild(borderCellElement)\r\n  }\r\n\r\n  const topRightBorderCellElement = document.createElement('div')\r\n  topRightBorderCellElement.className = 'border-cell top-right'\r\n  topBorderRowElement.appendChild(topRightBorderCellElement)\r\n\r\n  containerElement.appendChild(topBorderRowElement)\r\n\r\n  // Left border + playable area + right border:\r\n\r\n  this.field.forEach(row => {\r\n    const rowElement = document.createElement('div')\r\n    rowElement.className = 'row'\r\n\r\n    const leftBorderCellElement = document.createElement('div')\r\n    leftBorderCellElement.className = 'border-cell left'\r\n    rowElement.appendChild(leftBorderCellElement)\r\n\r\n    row.forEach(cell => {\r\n      const cellElement = document.createElement('div')\r\n      cellElement.className = `cell ${cell ? `snake ${this.getTileName(cell)}` : ''}`\r\n      rowElement.appendChild(cellElement)\r\n    })\r\n\r\n    const rightBorderCellElement = document.createElement('div')\r\n    rightBorderCellElement.className = 'border-cell right'\r\n    rowElement.appendChild(rightBorderCellElement)\r\n\r\n    containerElement.appendChild(rowElement)\r\n  })\r\n\r\n  // Bottom border:\r\n\r\n  const bottomBorderRowElement = document.createElement('div')\r\n  bottomBorderRowElement.className = 'row'\r\n\r\n  const bottomLeftBorderCellElement = document.createElement('div')\r\n  bottomLeftBorderCellElement.className = 'border-cell bottom-left'\r\n  bottomBorderRowElement.appendChild(bottomLeftBorderCellElement)\r\n\r\n  for (let i = 0; i < this.width; i++) {\r\n    const borderCellElement = document.createElement('div')\r\n    borderCellElement.className = 'border-cell bottom'\r\n    bottomBorderRowElement.appendChild(borderCellElement)\r\n  }\r\n\r\n  const bottomRightBorderCellElement = document.createElement('div')\r\n  bottomRightBorderCellElement.className = 'border-cell bottom-right'\r\n  bottomBorderRowElement.appendChild(bottomRightBorderCellElement)\r\n\r\n  containerElement.appendChild(bottomBorderRowElement)\r\n}\r\n\r\nwindow.addEventListener('DOMContentLoaded', _event => {\r\n  this.initialize()\r\n  this.draw()\r\n  document.querySelector('.keyboard').addEventListener('mousedown', this.onMouseDown)\r\n  document.addEventListener('keydown', this.onKeyDown)\r\n  setInterval(this.onTick, 200)\r\n})"]}